name: Publish hotfix

on:
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'Realse version to hotfix: eg 1.2.3'
        required: true

jobs:
  bumpVersions:
    runs-on: self-hosted
    name: Bump versions and publish
    permissions:
      contents: write

    steps:
      - name: Add path globally
        run: |
          echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Add JAVA_HOME globally
        run: |
          echo "JAVA_HOME=$(/usr/libexec/java_home -v 17)" >> $GITHUB_ENV

      - name: Setup Java JDK
        uses: actions/setup-java@v3.3.0
        with:
          java-version: 17
          distribution: "temurin"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          lfs: 'true'
          fetch-depth: 0

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.4.2
        env:
          CI: true
        with:
          gradle-version: "wrapper"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.GITHUBRUNNER_EC2_ACTIONS_ROLE_ARN }}
          role-duration-seconds: 1200
          role-skip-session-tagging: true
          
      - name: Store GitHub actions ENV from AWS SecretManager
        id: secrets
        uses: say8425/aws-secrets-manager-actions@v2
        with:
          AWS_DEFAULT_REGION: "eu-west-2"
          SECRET_NAME: "di-ipv-dca-mob-android/github-actions-env"

      - name: Store Google Play Service ENV from AWS SecretManager
        id: googlePlayServiceSecrets
        uses: say8425/aws-secrets-manager-actions@v2
        with:
          AWS_DEFAULT_REGION: "eu-west-2"
          SECRET_NAME: "di-ipv-dca-mob-android/google-play-service-account-json"

      - name: Decode Keystore
        env:
          ENCODED_STRING: ${{ env.KEYSTORE_BASE64 }}
        run: |
          echo "${ENCODED_STRING}" | base64 --decode > config/keystore.jks

      - name: Decode Service Account
        env:
          ENCODED_STRING: ${{ env.SERVICE_ACCOUNT_JSON_BASE64 }}
        run: |
          echo "${ENCODED_STRING}" | base64 --decode > config/service-account.json

      - name: Read gradle properties
        id: gradleProperties
        uses: actions/github-script@v6
        with:
          script: |
            const { readFileSync } = require('fs')
            const propsFile = './app/gradle.properties';
            const props = readFileSync(propsFile)
              .toString('utf8')
              .split('\n')
              .filter(s => s.length)
              .map(s => s.split('='))
              .reduce(
                (p, [k,v]) => {
                  p[k] = v;
                  return p;
                }, {}
              )
            core.exportVariable('GRADLE_PROPS_FILE', propsFile)
            core.exportVariable('GRADLE_PROPS', JSON.stringify(props))

      - name: Get commit message
        id: commitMessage
        uses: actions/github-script@v6
        with:
          script: |
            const commit = await github.rest.git.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: process.env.GITHUB_SHA,
            })
            core.exportVariable('COMMIT_MESSAGE', commit.data.message)

      - name: Get latest tagged version
        run: |
          git pull --tags
          RAW_TAG=$(git describe --match "v${{ github.event.inputs.releaseTag }}*" --abbrev=0 --tags)
          echo "RAW_TAG = $RAW_TAG"
          TAG="${RAW_TAG:1}"
          echo "TAG = $TAG"
          echo "PREVIOUS_VERSION=$TAG" >> $GITHUB_ENV

      - name: Bump version name
        id: versionName
        uses: actions/github-script@v6
        env:
          PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
        with:
          script: |
            console.log(`PREVIOUS_VERSION = ${process.env.PREVIOUS_VERSION}`)
            let [major, minor, patch, hotfix = 0] = process.env.PREVIOUS_VERSION.split('.')
            hotfix++

            console.log(`MAJOR = ${major}`)
            console.log(`MINOR = ${minor}`)
            console.log(`PATCH = ${patch}`)
            console.log(`HOTFIX = ${hotfix}`)
            console.log(`Updating VERSION_NAME to ${[major, minor, patch, hotfix].join('.')}`)
            core.exportVariable('VERSION_NAME', [major, minor, patch, hotfix].join('.'))

      - name: Calculate version code
        id: versionCode
        run: echo "value=$(date +'%s')" >> $GITHUB_OUTPUT

      - name: Update version code
        uses: chkfung/android-version-actions@v1.1
        with:
          gradlePath: app/build.gradle
          versionCode: ${{ steps.versionCode.outputs.value }}

      - name: Display updated versions
        env:
          VERSION_CODE: ${{ steps.versionCode.outputs.value }}
        run: |
          echo "Version code ${VERSION_CODE}"
          echo "Version name ${VERSION_NAME}"

      - name: Update gradle properties
        uses: actions/github-script@v6
        with:
          script: |
            const { writeFileSync } = require('fs')
            const props = JSON.parse(process.env.GRADLE_PROPS)
            const propsFile = process.env.GRADLE_PROPS_FILE

            props['uk.gov.documentchecking.versionName'] = process.env.VERSION_NAME
            props['uk.gov.documentchecking.versionCode'] = "${{ steps.versionCode.outputs.value }}"

            const propsData = Object.keys(props)
              .reduce((p, c) => {
                p.push([c, props[c]].join('='))
                return p
              }, [])
              .join('\n')

            writeFileSync(propsFile, propsData, 'utf8')

      - name: Bundle release
        id: gradleBuild
        run: ./gradlew assembleRelease bundleRelease dokkaGfmMultiModule dokkaHtmlMultiModule
        env:
          CI: true
          SIGNING_KEY_ALIAS: ${{ env.KEYSTORE_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ env.KEYSTORE_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ env.KEYSTORE_PASSWORD }}
          READID_API_KEY: ${{ env.READID_API_KEY }}

      #      - name: Upload Bundles to GitHub
      #        id: uploadBundles
      #        uses: actions/upload-artifact@v3
      #        with:
      #          name: bundles
      #          path: |
      #            app/build/outputs/bundle

      - name: Update fastlane
        run: |
          export LC_ALL=en_GB.UTF-8
          export LANG=en_GB.UTF-8
          export GEM_HOME=$HOME/.gem
          export GEM_PATH=$HOME/.gem
          
          bundle update fastlane

      - name: Upload bundles to fastlane
        run: |
          export LC_ALL=en_GB.UTF-8
          export LANG=en_GB.UTF-8
          export GEM_HOME=$HOME/.gem
          export GEM_PATH=$HOME/.gem

          bundle exec fastlane supply --package_name "uk.gov.documentchecking.dev" --json_key_data "${json_key_data}" --aab app/build/outputs/bundle/devRelease/app-dev-release.aab --track internal

          git tag -a "dev-${VERSION_NAME}" -m "Publish ${VERSION_NAME} - uk.gov.documentchecking.dev - internal"
          git push origin "dev-${VERSION_NAME}"
        
          bundle exec fastlane supply --package_name "uk.gov.documentchecking.build" --json_key_data "${json_key_data}" --aab app/build/outputs/bundle/buildRelease/app-build-release.aab --track internal

          git tag -a "build-${VERSION_NAME}" -m "Publish ${VERSION_NAME} - uk.gov.documentchecking.build - internal"
          git push origin "build-${VERSION_NAME}"
        
          bundle exec fastlane supply --package_name "uk.gov.documentchecking.staging" --json_key_data "${json_key_data}" --aab app/build/outputs/bundle/stagingRelease/app-staging-release.aab --track internal

          git tag -a "staging-${VERSION_NAME}" -m "Publish ${VERSION_NAME} - uk.gov.documentchecking.staging - internal"
          git push origin "staging-${VERSION_NAME}"

          bundle exec fastlane supply --package_name "uk.gov.documentchecking.integration" --json_key_data "${json_key_data}" --aab app/build/outputs/bundle/integrationRelease/app-integration-release.aab --track internal

          git tag -a "integration-${VERSION_NAME}" -m "Publish ${VERSION_NAME} - uk.gov.documentchecking.integration - internal"
          git push origin "integration-${VERSION_NAME}"

          bundle exec fastlane supply --package_name "uk.gov.documentchecking" --json_key_data "${json_key_data}" --aab app/build/outputs/bundle/productionRelease/app-production-release.aab --track internal

          git tag -a "production-${VERSION_NAME}" -m "Publish ${VERSION_NAME} - uk.gov.documentchecking - internal"
          git push origin "production-${VERSION_NAME}"

      #      - name: Display sharable links
      #          env:
      #            VERSION_CODE: ${{ steps.versionCode.outputs.value }}
      #          run: |
      #            echo "Staging    : https://play.google.com/apps/test/uk.gov.documentchecking.staging/${VERSION_CODE} (${VERSION_NAME})"
      #            echo "Integration: https://play.google.com/apps/test/uk.gov.documentchecking.integration/${VERSION_CODE} (${VERSION_NAME})"
      #            echo "Production : https://play.google.com/apps/test/uk.gov.documentchecking/${VERSION_CODE} (${VERSION_NAME})"

      - name: Tag build
        run: |
          git tag -a "v${VERSION_NAME}" -m "v${VERSION_NAME}"
            git push origin "v${VERSION_NAME}"

      - name: Bundle Dokka documentation
        id: zipDokka
        run: |
          zip -9 -r documentation.zip ./build/dokka

      - name: Upload Dokka Documentation
        id: uploadDokka
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          retention-days: 14
          path: |
            documentation.zip

      - name: Clean repository
        id: cleanRepository
        if: always()
        run: |
          rm -f config/keystore.jks
          rm -f config/service-account.json
